# lessons/statistical-testing-beta.yml
# 
# STARTER TEMPLATE FOR ACT-CMS LESSON PORTAL SUBMISSION
# Replace all placeholder text with your actual lesson information
# Remove any sections that don't apply to your lesson

# BASIC METADATA (REQUIRED)
# Use a clear, descriptive title that includes the main topic
title: "Statistical Testing, or How Heavy is that Penny?"

# Brief description for search results (1-2 sentences)
description: "Generate code in Python to perform six tasks for statistical analysis: Upload multiple datasets from CSV files; Reorganize and summarize data; Recognize and address outliers; Apply Student's T test; Perform linear least-squares with propagation of uncertainty; Build and plot histograms."

# Longer description for the lesson page (use | for multi-line text)
expanded_description: |
  This lesson can be used as an introduction to Analytical Chemistry Statistical Analysis tasks in Python.
  The suggested context would be to walk through it together during the third week of Analytical Laboratory.
  About two hours should be allocated to this lesson, in the context of a three-hour period in which the first hour is spent counting pennies.
  
  This lesson was not piloted in Spring 2025 and therefore is still in the beta testing phase.
  Instructors may wish to tailor the lesson to highlight specific content learning objectives for statistical analysis.

# COURSE INFORMATION (REQUIRED)
# Choose ONE: "None", "Beginner", "Intermediate", "Advanced"
programming_skill: "None"
# None: No programming experience. 
# Beginner: Knows variables, conditionals, loops
# Intermediate: Can write their own scripts from scratch
# Advanced: Can write/develop software.

# Examples: "Foundational Module", "Physical Chemistry", "Organic Chemistry", 
# "Inorganic Chemistry", "Analytical Chemistry", "Biochemistry", "Materials Science", "Other"
primary_course: "Foundational Module"

# List other courses where this lesson could be used (optional)
also_for:
  - "Statistics"
  - "Statistical Mechanics"

# List all authors
authors: 
  - "Dr. Christine Morales"

# Estimated total time for all materials
estimated_time: "2 hours"

# Write a description of your module.
# Single notebook, multi-part module, etc?
format: "Single Notebook"

# INSTRUCTOR INFORMATION (OPTIONAL)
# Contact email for instructor access requests (optional - will use default if not specified)
instructor_email: "moralech@mountunion.edu"
# Note: Instructor materials will be located at: instructor-repo/statistical-testing-beta/
# where {lesson-filename} matches this YAML file's name

# INSTRUCTOR DETAILS (OPTIONAL)
# What level of students was this piloted with?
student_level: "Undergraduate - Second Year"  # e.g., "Graduate", "Undergraduate - First Year", "Mixed Graduate/Undergraduate"
# How many students has this been tested with?
students_piloted: 0  # Number of students
# Free-form notes for instructors
instructor_notes: |
  This introductory module should work well as a third programming lesson for students with no prior coding experience.

  Teaching tips:
  - Students are learning for the first time here how to import data from CSV files.  
  - Several types of data and coding structures are introduced here for the first time, so introductory text may be worthwhile for students to read.
  - Using an Excel template to organize data into properly formatted CSV files with matching column headers is critical.
  - (Not included) In Task 2, the Python code here does NOT automatically generate tables of data organized by year for students
    to print out and tape into their lab notebooks.  If you feel this is useful, the two print statements can be modified to do so.
  - In Task 5, students are asked to copy/paste/modify code for a graph of brass penny data to make a graph for zinc penny data.
    If time is tight, you may wish to provide students with hints and/or the sample-code for the zinc penny graph.
  - Students should work together in groups to ensure they are accountable to understand each part.
  - Encourage students to share ideas but code/answer questions in their own copy of the notebook.
  - Remind students to save their own copy before they begin work.
  - Some students may have several Google accounts; remind them to be aware of which account is logged in when they save.
  - Keeping an eye on the time may be helpful to ensure students are progressing at a reasonable pace.
  
  Timing notes:
  - Although this has not yet been piloted, it was based on a corresponding activity using Excel that typically took 2 hours.
  - Task 1 is anticipated to take students 20-25 minutes (including the work of creating/uploading properly formatted CSV files)
  - Task 2 is anticipated to take students 10-15 minutes.  
  - Task 3 is *anticipated* to take students 10-20 minutes. If outliers are found and decisions are made to clean data, it may take up to 25 minutes.
  - Task 4 is *anticipated* to take students 15-20 minutes if they already know how a Student's T test works.
    It may be helpful to stop here and add in a 5-minute mini-lecture about Student's T tests, null hypothesis, etc. so everyone is on the same page.
  - Task 5 is anticipated to take students 10-15 minutes.  If time is tight, you may wish to provide hints and/or sample-code to assist, or else skip the second graph.
    Also, please remind students of how to save and print the graphs to tape into their lab notebook.
  - Task 6 is *anticipated* to take students 15-20 minutes if they do the code commenting and as instructed.  
    If time is tight, you may wish to advise students to run the code without comments, and work together on answering questions.
    Also, please remind students to save and print the graphs to tape into their lab notebook.
  
  Common student questions:
  - Students may ask if they need to tape the graph into their laboratory notebook before turning it in.
  - Students may ask if the output from Part 2 is sufficient for the data tables that they should print out.
    If you want the output to include all grouped data, you will need to modify the two print statements in Part 2 accordingly.

# Related lessons that complement this one
related_modules:
  - "moralech-umu-basic-tasks"
  - "calibration-of-glassware" 
  - "solution-preparation-spectrophotometry"
  - "standard-addition-spectophotometry"
  - "ocean-acidification"
  - "buffer-solutions"
  - "hplc-analysis"
  - "gc-ms-internal-standard"

# REPOSITORY URLS (REQUIRED)
# Link to the repository containing your public material
public_repo_url: "https://github.com/act-cms/statistical-testing-beta"

# MATERIALS SECTION (REQUIRED)
# List each notebook/material in logical order
materials:
  - title: "Part 1: Introduction"
    description: "This Jupyter notebook can be used to generate code in Python to perform six tasks for statistical analysis: Upload multiple datasets from CSV files; Reorganize and summarize data; Recognize and address outliers; Apply Student's T test; Perform linear least-squares with propagation of uncertainty; Build and plot histograms "
    type: "notebook"  # Usually "notebook", could be "slides", "dataset", etc.
    duration: "2 hours"
    
    # REQUIRED: Include at least one URL (preferably both)
    # Direct link to notebook file on GitHub
    github_url: "https://github.com/act-cms/statistical-testing-beta/blob/main/Statistical_Testing_Student_Version.ipynb"
    # Google Colab launch link (recommended for accessibility)
    colab_url: "https://colab.research.google.com/github/act-cms/statistical-testing-beta/blob/main/Statistical_Testing_Student_Version.ipynb"
    
    # Learning objectives specific to this material
    objectives:
      - "Content: Define and use statistical concepts that model the effects of random error on a data set"
      - "Content: Use careful documentation and/or the statistical Grubbs Test to decide when a data point can be discarded"
      - "Content: Apply the Student T test to accept or reject a null hypothesis under several different sets of conditions"
      - "Process: Use Python code to transform data using structures such as arrays"
      - "Process: Use Python code to visualize data using different types of graphs"
      - "Process: Work in teams to manage and share data, and document and share causes of outlier data"
      - "Process: Work in teams to evaluate outcomes of statistical tests"
  

# LEARNING OBJECTIVES (REQUIRED)
# What molecular science concepts will students learn?
scientific_objectives:
  - "Define and use statistical concepts that model the effects of random error on a data set"
  - "Use careful documentation and/or the statistical Grubbs Test to decide when a data point can be discardeds"
  - "Apply the Student T test to accept or reject a null hypothesis under several different sets of conditions"

# What computational/programming skills will students develop?
cyberinfrastructure_objectives:
  - "Use Python code to transform data using structures such as arrays"
  - "Use Python code to visualize data using different types of graphs"
  - "Work in teams to manage and share data, and document and share causes of outlier data"
  - "Work in teams to evaluate outcomes of statistical tests"

# PREREQUISITES (REQUIRED)
# What science background do students need?
scientific_prerequisites:
  - "Basic statistical definitions including mean and standard deviation"

# What programming experience is assumed?
programming_prerequisites:
  - "No prior programming experience required"
  # OR: eg "Basic Python syntax (variables, loops, functions)"

# PLATFORM SUPPORT (REQUIRED)
# List platforms where your materials can be used.
platforms:
  - "Google Colab"
  - "Local Installation"
  - "ChemCompute"

# Which platform do you recommend for most users?
recommended_platform: "Google Colab"

# METADATA (REQUIRED)
# Tags help with searching - use relevant keywords
tags:
  - "python"
  - "analytical-chemistry"
  - "laboratory"
  - "data-analysis"  # Use appropriate scientific area tags
