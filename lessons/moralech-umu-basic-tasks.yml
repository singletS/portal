# lessons/moralech-umu-basic-tasks.yml
# 
# STARTER TEMPLATE FOR ACT-CMS LESSON PORTAL SUBMISSION
# Replace all placeholder text with your actual lesson information
# Remove any sections that don't apply to your lesson

# BASIC METADATA (REQUIRED)
# Use a clear, descriptive title that includes the main topic
title: "Basic Tasks Using a Jupyter Notebook with Code in Python for Analytical Chemistry Data Analysis"

# Brief description for search results (1-2 sentences)
description: "Generate code in Python to perform four basic tasks: Basic calculations; Entering data into NumPy arrays; Fitting data in NumPy arrays to a NumPy or SciPy nonlinear model function; Creating a Matplotlib graph of data in NumPy arrays and of a nonlinear model function."

# Longer description for the lesson page (use | for multi-line text)
expanded_description: |
  This lesson can be used as an introduction to Analytical Chemistry Data Analysis tasks in Python.
  The suggested context would be to walk through it together during the first week of Analytical Laboratory.
  About 45 minutes to an hour should be allocated to this lesson; an hour is best.

# COURSE INFORMATION (REQUIRED)
# Choose ONE: "None", "Beginner", "Intermediate", "Advanced"
programming_skill: "None"
# Beginner: Knows variables, conditionals, loops
# Intermediate: Can write their own scripts from scratch
# Advanced: Can write/develop software.

# Examples: "Foundational Module", "Physical Chemistry", "Organic Chemistry", 
# "Inorganic Chemistry", "Analytical Chemistry", "Biochemistry", "Materials Science", "Other"
primary_course: "Analytical Chemistry"

# List other courses where this lesson could be used (optional)
also_for:
  - "Instrumental Analysis"
  - "Physical Chemistry"

# List all authors
authors: 
  - "Dr. Christine Morales"
  
# INSTRUCTOR DETAILS (OPTIONAL)
instructor_email: "moralech@mountunion.edu"
# What level of students was this piloted with?
student_level: "Undergraduate - Second Year"  # e.g., "Graduate", "Undergraduate - First Year", "Mixed Graduate/Undergraduate"
# How many students has this been tested with?
students_piloted: 10  # Number of students
# Free-form notes for instructors
instructor_notes: |
  This introductory module works well as the first programming lesson for students with no coding experience.
  
  Teaching tips:
  - Students should work together in groups to ensure they are accountable to understand each part.
  - Encourage students to share ideas but code/answer questions in their own copy of the notebook.
  - Remind students to save their own copy before they begin work.
  - Some students may have several Google accounts; remind them to be aware of which account is logged in when they save.
  - Students are asked to copy/paste the **editable plain text**; Colab preview mode uses a different character set.
  - If you do not have a full hour available in lab, consider scheduling an out-of-class help session for the Major Challenge.
  - Please edit the last Markdown cell to reflect your own policies for turning in assignments.
  - If you accept links to student copies of Jupyter notebooks instead of the actual .ipynb files, students may change the file until you grade it.  If using nbgrader, you could set it up to run when the assignment is due.
  - If you require students to download their completed Jupyter notebooks, students should download the .ipynb file and turn it in.
  
  Common student questions:
  - These files are called "Juypter notebooks," but students may also have "laboratory notebooks" that need to be turned in separately.  Clarify which is which.
  - Students may ask which file format to download.  They should download the .ipynb file of their completed notebook.

# Related lessons that complement this one
related_modules:
  - "calibration-of-glassware"
  - "statistical-testing-beta" 
  - "solution-preparation-spectrophotometry"
  - "standard-addition-spectophotometry"
  - "ocean-acidification"
  - "buffer-solutions"
  - "hplc-analysis"
  - "gc-ms-internal-standard"
  
# Estimated total time for all materials
estimated_time: "1 hour"

# Choose ONE: "Single Notebook", "Multi-Part Materials Module", "Project-Based Module"
format: "Single Notebook"

# MATERIALS SECTION (REQUIRED)
# List each notebook/material in logical order
materials:
  - title: "Basic Tasks using a Jupyter Notebook with Code in Python"
    description: "This Jupyter notebook can be used to generate code in Python to perform four basic tasks: Basic calculations; Entering data into NumPy arrays; Fitting data in NumPy arrays to a NumPy or SciPy nonlinear model function; Creating a Matplotlib graph of data in NumPy arrays and of a nonlinear model function."
    type: "notebook"  # Usually "notebook", could be "slides", "dataset", etc.
    duration: "1 hour"
    
    # REQUIRED: Include at least one URL (preferably both)
    # Direct link to notebook file on GitHub
    github_url: "https://github.com/act-cms/moralech-umu-basic-tasks/blob/main/Basic_Tasks_Student_Version.ipynb"
    # Google Colab launch link (recommended for accessibility)
    colab_url: "https://colab.research.google.com/github/act-cms/moralech-umu-basic-tasks/blob/main/Basic_Tasks_Student_Version.ipynb"
    
    # Learning objectives specific to this material
    objectives:
      - "Content: Recognize and report significant figures"
      - "Content: Convert between mass in grams and amount in moles"
      - "Content: Explain periodic trends in molar masses"
      - "Process: Use Python code to define values and functions, and to perform calculations"
      - "Process: Use Python code to report the output of calculations in a specified format"
      - "Process: Use Python code to fit data to a model, and report the fitted model"
      - "Process: Use Python code to plot data with a model, and display the plot in a specified format"
  
  # Add more materials as needed

# LEARNING OBJECTIVES (REQUIRED)
# What molecular science concepts will students learn?
scientific_objectives:
  - "Recognize and report significant figures"
  - "Convert between mass in grams and amount in moles"
  - "Explain periodic trends in molar masses"

# What computational/programming skills will students develop?
cyberinfrastructure_objectives:
  - "Use Python code to define values and functions, and to perform calculations"
  - "Use Python code to report the output of calculations in a specified format"
  - "Use Python code to fit data to a model, and report the fitted model"
  - "Use Python code to plot data with a model, and display the plot in a specified format"

# PREREQUISITES (REQUIRED)
# What science background do students need?
scientific_prerequisites:
  - "Significant Figures"
  - "Moles and Molar Masses"
  - "Periodic Table"

# What programming experience is assumed?
programming_prerequisites:
  - "No prior programming experience required"
  # OR: - "Basic Python syntax (variables, loops, functions)"

# PLATFORM SUPPORT (REQUIRED)
# List platforms where you've tested your materials
platforms:
  - "Google Colab"

# Which platform do you recommend for most users?
recommended_platform: "Google Colab"

# REPOSITORY URLS (REQUIRED)
# Link to the main repository students can clone
public_repo_url: "https://github.com/act-cms/moralech-umu-basic-tasks"

# Link to instructor materials (zip file in private repo)
instructor_materials_url: "https://github.com/act-cms/instructor-materials/raw/main/moralech-umu-basic-tasks/Basic-Tasks.zip"

# METADATA (REQUIRED)
# Tags help with searching - use relevant keywords
tags:
  - "python"
  - "analytical-chemistry"
  - "laboratory"
  - "data-analysis"  # Use appropriate scientific area tags
