# lessons/solution-preparation-spectrophotometry.yml
# 
# STARTER TEMPLATE FOR ACT-CMS LESSON PORTAL SUBMISSION
# Replace all placeholder text with your actual lesson information
# Remove any sections that don't apply to your lesson

# BASIC METADATA (REQUIRED)
# Use a clear, descriptive title that includes the main topic
title: "Solution Preparation and Spectrophotometry"

# Brief description for search results (1-2 sentences)
description: "Data analysis for a Solution Preparation and Spectrophotometry Experiment in Analytical Chemistry Laboratory."

# Longer description for the lesson page (use | for multi-line text)
expanded_description: |
  This lesson can be used to analyze solution preparation and spectrophotometry data collected by students in an analytical chemistry laboratory.
  The suggested context would be to walk through it together during the corresponding Analytical Laboratory experiment.
  About a half hour to an hour should be allocated in lab to this lesson, after data collection is complete.
  
  You can use multiple paragraphs to fully describe the lesson scope
  and learning experience.

# COURSE INFORMATION (REQUIRED)
# Choose ONE: "None", "Beginner", "Intermediate", "Advanced"
programming_skill: "None"
# None: No programming experience. 
# Beginner: Knows variables, conditionals, loops
# Intermediate: Can write their own scripts from scratch
# Advanced: Can write/develop software.

# Examples: "Foundational Module", "Physical Chemistry", "Organic Chemistry", 
# "Inorganic Chemistry", "Analytical Chemistry", "Biochemistry", "Materials Science", "Other"
primary_course: "Analytical Chemistry"

# List other courses where this lesson could be used (optional)
also_for:
  - "Physical Chemistry"
  - "General Chemistry"

# List all authors
authors: 
  - "Dr. Christine Morales"

# Estimated total time for all materials
estimated_time: "1 hour or less"

# Write a description of your module.
# Single notebook, multi-part module, etc?
format: "Single Notebook"

# INSTRUCTOR INFORMATION (OPTIONAL)
# Contact email for instructor access requests (optional - will use default if not specified)
instructor_email: "moralech@mountunion.edu"
# Note: Instructor materials will be located at: instructor-repo/{lesson-filename}/
# where {lesson-filename} matches this YAML file's name

# INSTRUCTOR DETAILS (OPTIONAL)
# What level of students was this piloted with?
student_level: "Undergraduate - Second Year"  # e.g., "Graduate", "Undergraduate - First Year", "Mixed Graduate/Undergraduate"
# How many students has this been tested with?
students_piloted: 10  # Number of students
# Free-form notes for instructors
instructor_notes: |
  This introductory module works well as an early (second or third) programming lesson for students with no prior coding experience.

  Teaching tips:
  - If your students have already done Basic Tasks and you have time, consider providing less sample code for data entry in Task 1.  
  - If you do not provide sample code for data entry in Task 1, consider prompting students to copy Numpy array data entry syntax from Basic Tasks.
  - If your students took more than one replicate absorbance measurement of each stock concentration (k > 2 in Task 4), 
    the commented-out sample code in the student version of the notebook is a very simple way to just allow them to enter all their data.
    Error bars displayed in Task 3 will be overestimated in this simple approach, as they will only include data from one replicate.  
    A more advanced approach is possible: students could enter all values into the same array, and also enter the stock concentrations
    multiple times into the corresponding array. Students would then need to type in their own value of N rather than rely on a length function.
  - Instructors may choose to point out the vast features of SciPy, which also will be used in more advanced calculations in other modules.
  - It is possible to expand Task 3 if you want to use this as a deeper tutorial on graphing with Matplotlib.
  - Students should work together in groups to ensure they are accountable to understand each part.
  - Encourage students to share ideas but code/answer questions in their own copy of the notebook.
  - Remind students to save their own copy before they begin work.
  - Some students may have several Google accounts; remind them to be aware of which account is logged in when they save.
  
  Timing notes:
  - Task 1 typically takes students 10-15 minutes when sample code is provided.  Add 5 minutes if prompting students to copy Numpy syntax from Basic Tasks.
  - Task 2 typically takes students 5-10 minutes.
  - Task 3 typically takes students 10-15 minutes.   Remind students how to save and print the graph to tape into their lab notebook.
  - Task 4 typically takes students 5-10 minutes.  
  
  Common student questions:
  - Students may ask how to enter multiple replicate measurements.  Consider making a plan for this before the start of lab.
  - Students may ask if they need to tape the graph into their laboratory notebook before turning it in

# Related lessons that complement this one
related_modules:
  - "moralech-umu-basic-tasks"
  - "statistical-testing-beta" 
  - "calibration-of-glassware"
  - "standard-addition-spectophotometry"
  - "ocean-acidification"
  - "buffer-solutions"
  - "hplc-analysis"
  - "gc-ms-internal-standard"

# REPOSITORY URLS (REQUIRED)
# Link to the repository containing your public material
public_repo_url: "https://github.com/act-cms/solution-preparation-spectrophotometry"

# MATERIALS SECTION (REQUIRED)
# List each notebook/material in logical order
materials:
  - title: "Solution Preparation and Spectrophotometry"
    description: "This notebook can be used to generate code in Python to perform four tasks: Input dependent and independent variables into arrays; Use SciPy to fit data to a linear model with uncertainty; Use Matplotlib to generate a calibration curve; Use a linear best-fit model with uncertainty to find concentration and propagated uncertainty."
    type: "notebook"  # Usually "notebook", could be "slides", "dataset", etc.
    duration: "1 hour or less"
    
    # REQUIRED: Include at least one URL (preferably both)
    # Direct link to notebook file on GitHub
    github_url: "https://github.com/act-cms/solution-preparation-spectrophotometry/blob/main/Solution_Preparation_Student_Version.ipynb"
    # Google Colab launch link (recommended for accessibility)
    colab_url: "https://colab.research.google.com/github/act-cms/solution-preparation-spectrophotometry/blob/main/colab-notebooks/Solution_Preparation_Student_Version.ipynb"
    
    # Learning objectives specific to this material
    objectives:
      - "Content: Explain calibration and analysis for spectrophotometric data"
      - "Content: Use a calibration curve to find the concentration of an analyte in solution"
      - "Process: Use Python code to transform data using structures such as arrays"
      - "Process: Use Python code to visualize data using different types of graphs"

# LEARNING OBJECTIVES (REQUIRED)
# What molecular science concepts will students learn?
scientific_objectives:
  - "Explain calibration and analysis for spectrophotometric data"
  - "Use a calibration curve to find the concentration of an analyte in solution"

# What computational/programming skills will students develop?
cyberinfrastructure_objectives:
  - "Use Python code to transform data using structures such as arrays"
  - "Use Python code to visualize data using different types of graphs"

# PREREQUISITES (REQUIRED)
# What science background do students need?
scientific_prerequisites:
  - "General Chemistry"
  - "Familiarity with data sets that can be fit to a *model*, such as a linear calibration curve"

# What programming experience is assumed?
programming_prerequisites:
  - "Familiarity with *arrays*"
  # OR: eg "Basic Python syntax (variables, loops, functions)"

# PLATFORM SUPPORT (REQUIRED)
# List platforms where your materials can be used.
platforms:
  - "Google Colab"
  - "Local Installation"
  - "ChemCompute"

# Which platform do you recommend for most users?
recommended_platform: "Google Colab"

# METADATA (REQUIRED)
# Tags help with searching - use relevant keywords
tags:
  - "python"
  - "analytical-chemistry"
  - "laboratory"
  - "data-analysis"  # Use appropriate scientific area tags
