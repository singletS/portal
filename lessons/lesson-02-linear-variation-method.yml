# lessons/your-lesson-name.yml
#
# STARTER TEMPLATE FOR ACT-CMS LESSON PORTAL SUBMISSION
# Replace all placeholder text with your actual lesson information
# Remove any sections that don't apply to your lesson

# BASIC METADATA (REQUIRED)
# Use a clear, descriptive title that includes the main topic
title: "Introduction to the linear variation method"

# Brief description for search results (1-2 sentences)
description: "In this lesson students implement the linear variation method to calculate approximate solutions to the time-independent Schrodinger equation."

# Longer description for the lesson page (use | for multi-line text)
expanded_description: |
  Students are introduced to basic tenets of the linear variation method for computing approximate solution to the Schrodinger equation. Sections 1 and 2 summarize the method while sections 3 and 4 introduce atomic units and the syntax for matrix diagonalization in Python. If desired, the appendix contains a worked-out example for a 2-parameter trial function to demonstrate the steps of linear variational method and to highlight the connection between matrix diagonalization and solving for the optimal set of expansion coefficients.

  In part 1, the instructor leads a live coding session to demonstrate the implementation of the linear variation method for a modified particle in a box potential and the students are then asked to write their own code to solve the time-independent Schrodinger equation for a double-well potential. 

# COURSE INFORMATION (REQUIRED)
# Choose ONE: "None", "Beginner", "Intermediate", "Advanced"
programming_skill: "Intermediate"
# None: No programming experience. 
# Beginner: Knows variables, conditionals, loops
# Intermediate: Can write their own scripts from scratch
# Advanced: Can write/develop software.

# Examples: "Foundational Module", "Physical Chemistry", "Organic Chemistry", 
# "Inorganic Chemistry", "Analytical Chemistry", "Biochemistry", "Materials Science", "Other"
primary_course: "Physical Chemistry"

# List other courses where this lesson could be used (optional)
also_for:
  - "Physical Chemistry"

# List all authors
authors:
  - "Prof. Gergely Gidofalvi"

# Estimated total time for all materials
estimated_time: "3 or 6 hours (depending on implementation of part 2)"

# Write a description of your module.
# Single notebook, multi-part module, etc?
format: "Multi-Part Materials Module"

# INSTRUCTOR INFORMATION (OPTIONAL)
# Contact email for instructor access requests (optional - will use default if not specified)
instructor_email: "gidofalvi@gonzaga.edu"
# Note: Instructor materials will be located at: instructor-repo/{lesson-filename}/
# where {lesson-filename} matches this YAML file's name

# INSTRUCTOR DETAILS (OPTIONAL)
# What level of students was this piloted with?
student_level: "Undergraduate - Third Year"  # e.g., "Graduate", "Undergraduate - First Year", "Mixed Graduate/Undergraduate"
# How many students has this been tested with?
students_piloted: 20  # Number of students
# Free-form notes for instructors
instructor_notes: |
  Additional context for instructors using this lesson:

  - If needed, lesson-01-introduction-to-programming-and-python introduces students to basic programming concepts (loops, conditional statements, user-defined functions), data types (scalars, strings, vectors, and matrices), and built-in Python libraries and functions for numerical integration, curve fitting, plotting.  
  - To demonstrate the implementation of the linear variational method, it is recommended that the instructor lead a live coding session using the notebook for part 1. See approximate timing below.
  - After the live coding session students should be ready to tackle the assignment outlined in the notebook for part 2. The assignment includes using the linear variation method to compute approximate solutions for a double-well potential and to examine properties of the ground state solution. 
  
  Timing notes:
  - At the beginning of the live coding session, the instructor is encouraged to spend time reviewing the key steps of applying the method (section 3 of notebook) and highlight elements of code design.  
  - A three-hour live coding session should provide enough time for the instructor to complete part 1 and demonstrate 1) the application of the method, 2) use of SciPy functions for numerical integration and linear algebra, and 3) code design and debugging. A useful example could be a particle confined to an infinite well with a raised floor in the right half of the box. Approximately 2-2.5 hours for this would be appropriate. 
  - Students are then asked to write their own code to obtain approximate solutions for a modified double-well potential.  This notebook can be assigned either as homework for students to complete on their own outside of class/lab or with instructor supervision during a 3-hour lab period. 
  
  Common student questions:

  - "Students need several reminders related to the use of functions"
  - "Students, especially those with no linear algebra background, often have questions related to diagonalization and how it is equivalent to finding the optimal coefficients in the wave function expansion (the appendix addresses this)"
  - "Students often get confused between the quantum number index and the matrix index due to the zero offset in Python when building the matrix representation of the Hamiltonian"

# Related lessons that complement this one
related_modules:
  - "Introduction-to-programming-and-python"

# REPOSITORY URLS (REQUIRED)
# Link to the repository containing your public material
public_repo_url: "https://github.com/act-cms/lesson-02-linear-variation-method"

# MATERIALS SECTION (REQUIRED)
# List each notebook/material in logical order
materials:
  - title: "Part 1: Linear vatiational method - live coding session"
    description: "Jupyter notebook for instructor-led live coding session to demonstrate the implementation of the linear variation method."
    type: "notebook"  # Usually "notebook", could be "slides", "dataset", etc.
    duration: "3 hours"
    # REQUIRED: Include at least one URL (preferably both)
    # Direct link to notebook file on GitHub
    github_url: "https://github.com/act-cms/lesson-02-linear-variation-method/blob/main/lesson-02-linear-variation-method-live-coding-student.ipynb"
    # Google Colab launch link (recommended for accessibility)
    colab_url: "https://colab.research.google.com/github/act-cms/lesson-02-linear-variation-method/blob/main/lesson-02-linear-variation-method-live-coding-student.ipynb"
    # Learning objectives specific to this material
    objectives: []

  - title: "Part 2: Linear variational method - double well potential"
    description: "Jupyter notebook to assess student learning. Students are asked to write code to obtain approximate solutions to a double-well potential and examine properties of solutions."
    type: "notebook"
    duration: "Approximately 2-3 hours"
    github_url: "https://github.com/act-cms/lesson-02-linear-variation-method/blob/main/lesson-02-linear-variation-method-double-well-assignment-student.ipynb"
    colab_url: "https://colab.research.google.com/github/act-cms/lesson-02-linear-variation-method/blob/main/lesson-02-linear-variation-method-double-well-assignment-student.ipynb"
    objectives: []
#      - "Advanced skill development"
#      - "Application of concepts from Part 1"

# LEARNING OBJECTIVES (REQUIRED)
# What molecular science concepts will students learn?
scientific_objectives:
  - "Describe the key aspects of the linear variational method"
  - "Apply the linear variational method to obtain approximate solutions to the time-independent Schrodinger equation"
  - "Explore dependence of tunneling probability on particle mass"
  - "Explain the cost to benefit ratio of accuracy versus computational complexity"

# What computational/programming skills will students develop?
cyberinfrastructure_objectives:
  - "Write code to access and modify elements of arrays and/or matrices"
  - "Use SciPy libraries to solve eigenvalue equations and numerical integration"
  - "Use Matplotlib to visualize data"
  - "Demonstrate skills for debugging code designed for scientific applications"

# PREREQUISITES (REQUIRED)
# What science background do students need?
scientific_prerequisites:
  - "Introductory quantum mechanics including the time-independent Schrodinger equation and the particle in an infinite well model."

# What programming experience is assumed?
programming_prerequisites:
  - "It is assumed that students are familiar with basic Python syntax including variable assignment, for loops, user-defined functions, plotting, array initialization, and utilizing Python libraries."
  # OR: eg "Basic Python syntax (variables, loops, functions)"

# PLATFORM SUPPORT (REQUIRED)
# List platforms where your materials can be used.
platforms:
  - "Google Colab"
  - "ChemCompute"

# Which platform do you recommend for most users?
recommended_platform: "ChemCompute"

# METADATA (REQUIRED)
# Tags help with searching - use relevant keywords
tags:
  - "python"
  - "approximation techniques"
  - "linear variational method"
  - "particle in a box"
  - "double-well potential"
  - "quantum-chemistry"  # Use appropriate scientific area tags
